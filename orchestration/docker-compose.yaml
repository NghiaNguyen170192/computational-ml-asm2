x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.1}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: "minio_conn"
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    container_name: postgres
    hostname: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - nginx-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    hostname: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    expose:
      - "80"
    depends_on:
      - postgres
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    restart: always
    networks:
      - nginx-network

  postgres-init:
    image: postgres:13
    hostname: postgres-init
    container_name: postgres-init
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations:ro
    entrypoint: >
      bash -c "
      for f in /migrations/*.sql; do
          echo Running migration: $$f;
          psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f \"$$f\";
      done
      "
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      PGPASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - nginx-network

  redis:
    image: redis:latest
    container_name: redis
    hostname: redis
    expose:
      - "6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - nginx-network

  minio:
    image: minio/minio:latest
    container_name: minio
    hostname: minio
    expose:
      - "9000" # Minio API port
      - "9001" # Minio console port
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    restart: always
    networks:
      - nginx-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-init:
    image: minio/mc:latest
    hostname: minio-init
    container_name: minio-init
    entrypoint: >
      /bin/sh -c "
      until mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; do
        echo 'Waiting for MinIO...';
        sleep 2;
      done &&
      mc mb local/${MINIO_BUCKET_NAME} || true &&
      mc mb local/${MINIO_BUCKET_NAME}/klines || true &&
      mc mb local/${MINIO_BUCKET_NAME}/klines/inprogress || true &&
      mc mb local/${MINIO_BUCKET_NAME}/klines/processed || true &&
      exit 0
      "
    restart: "no"
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
    networks:
      - nginx-network

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    expose:
      - "8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    build:
      context: .
      dockerfile: Dockerfile
    image: custom-airflow:latest
    networks:
      - nginx-network
    hostname: airflow-webserver
    container_name: airflow-webserver

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    build:
      context: .
      dockerfile: Dockerfile
    image: custom-airflow:latest
    networks:
      - nginx-network
    hostname: airflow-scheduler
    container_name: airflow-scheduler

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    build:
      context: .
      dockerfile: Dockerfile
    image: custom-airflow:latest
    networks:
      - nginx-network
    hostname: airflow-worker
    container_name: airflow-worker

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    build:
      context: .
      dockerfile: Dockerfile
    image: custom-airflow:latest
    networks:
      - nginx-network
    hostname: airflow-triggerer
    container_name: airflow-triggerer

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint bash -c "
        airflow connections delete 'postgres_default' || true &&
        airflow connections add 'postgres_default' \
            --conn-type postgres \
            --conn-host postgres \
            --conn-login "${POSTGRES_USER}" \
            --conn-password "${POSTGRES_PASSWORD}" \
            --conn-schema "${POSTGRES_DB}" \
            --conn-port 5432 &&
        
        airflow connections delete 'minio_conn' || true &&
        airflow connections add 'minio_conn' \
            --conn-type 'aws' \
            --conn-login '${MINIO_ROOT_USER}' \
            --conn-password '${MINIO_ROOT_PASSWORD}' \
            --conn-extra '{\"host\": \"http://minio:9000\", \"region_name\": \"us-east-1\"}' &&
        
        airflow dags unpause dag_binance_backfill || true &&
        airflow dags unpause dag_binance_daily || true
        "

    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ""
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    build:
      context: .
      dockerfile: Dockerfile
    image: custom-airflow:latest
    networks:
      - nginx-network
    hostname: airflow-init
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    build:
      context: .
      dockerfile: Dockerfile
    image: custom-airflow:latest
    networks:
      - nginx-network
    hostname: airflow-cli
    container_name: airflow-cli

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    expose:
      - "5555"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    build:
      context: .
      dockerfile: Dockerfile
    image: custom-airflow:latest
    networks:
      - nginx-network
    hostname: flower
    container_name: flower

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/www:/var/www/certbot
      - ./nginx/ssl:/etc/letsencrypt
    networks:
      - nginx-network


  certbot:
    image: certbot/dns-cloudflare
    container_name: certbot
    volumes:
      - ./certbot/cloudflare.ini:/secrets/cloudflare.ini:ro
      - ./nginx/ssl:/etc/letsencrypt
    command: >
      certonly --dns-cloudflare
      --dns-cloudflare-credentials /secrets/cloudflare.ini
      --dns-cloudflare-propagation-seconds 30
      -d nqtn.dev -d *.nqtn.dev
      --non-interactive --agree-tos
      --email ${CERTBOT_EMAIL}
    networks:
      - nginx-network
volumes:
  postgres-db-volume:
  pgadmin-data:
  minio_data:

networks:
  nginx-network:
    external: true
